You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Solution:

class Solution {
public:
    int evalRPN(vector<string>& v) {
        int n=v.size();
        stack<long long>st;
        for(int i=0;i<n;i++)
        {  
            if(v[i]=="-"||v[i]=="*"||v[i]=="+"||v[i]=="/")
            {
                long long val1=st.top();
                st.pop();
                long long val2=st.top();
                st.pop();
                long long ans=0;
                if(v[i]=="-")
                {
                    st.push(val2-val1);
                }
                  if(v[i]=="+")
                {
                    st.push(val2+val1);
                }
                  if(v[i]=="*")
                {
                    ans=val1*val2;
                    st.push(ans);
                }  if(v[i]=="/")
                {
                    st.push(val2/val1);
                }
            }
            else
            {
                st.push(stoi(v[i]));
            }
        }
        return (int)st.top();
    }
};
