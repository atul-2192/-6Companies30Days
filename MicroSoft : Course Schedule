There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Solution:

class Solution {
public:
    bool cycle( vector<bool>&visited,vector<int>adj[],int i,vector<bool>&curr)
    {  if(curr[i]==true) return true;
     if(visited[i]==true) return false;
        visited[i]=true;
        curr[i]=true;
        for(int x:adj[i])
        {
         if(curr[x]==true||cycle(visited,adj,x,curr)==true)
         { 
           return true;
         }
        }
        curr[i]=false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
       
        if(numCourses==1) return true;
        vector<int>adj[numCourses];
        int n=prerequisites.size();
        if(n==0) return true;
        int m=prerequisites[0].size();
        if(m==0) return false;
        for(int i=0;i<n;i++)
        { adj[ prerequisites[i][0]].push_back( prerequisites[i][1]);
        }
       vector<bool>visited(numCourses,false); 
        vector<bool>curr(numCourses,false);
        for(int i=0;i<numCourses;i++)
        {
            if(visited[i]==false)
            {  
                 if(cycle(visited,adj,i,curr)==true) return false;
            }
        }
        return true;
    }
};
